<!DOCTYPE html>
<html lang="fa" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>صفحه کاربری</title>
    <!-- بارگذاری Bootstrap برای زبان‌های راست به چپ -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.rtl.min.css" rel="stylesheet">
    <!-- اضافه کردن فونت فارسی (اختیاری) -->
    <link href="https://fonts.googleapis.com/css2?family=Vazir&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Vazir', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #fdfbfb, #ebedee);
            margin: 0;
            padding: 20px;
        }
        .container {
            max-width: 800px;
            margin: auto;
        }
        .card {
            background-color: #ffffff;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            margin-bottom: 30px;
            padding: 20px;
        }
        .card h2 {
            margin-bottom: 20px;
            color: #333;
        }
        .friend-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }
        .friend-item:last-child {
            border-bottom: none;
        }
        .friend-item:hover {
            background-color: #f9f9f9;
        }
        .btn-custom {
            border-radius: 20px;
        }
        .form-container button {
            width: 100%;
            padding: 10px;
            font-size: 1.1rem;
        }
    </style>
</head>
<body>
<div class="container">
    <!-- پروفایل کاربری -->
    <div class="card">
        <h2>پروفایل کاربری</h2>
        <p><strong>نام کاربری:</strong> <span id="displayUsername"><%= user.username %></span></p>
        <p><strong>ایمیل:</strong> <span id="displayEmail"><%= user.email %></span></p>
        <button class="btn btn-primary btn-custom" onclick="openEditProfileModal()">ویرایش پروفایل</button>
    </div>

    <!-- لیست دوستان -->
    <div class="card">
        <h2>لیست دوستان</h2>
        <div class="input-group mb-3">
            <input type="text" class="form-control" id="newFriendUsername" placeholder="نام کاربر دوست">
            <button class="btn btn-success btn-custom" type="button" onclick="addFriend()">افزودن دوست</button>
        </div>
        <div id="friendsContainer">
            <!-- مثال یک دوست -->
            <div class="friend-item" style="display: none;">
                <button class="btn btn-danger btn-sm btn-custom" onclick="deleteFriend('دوست نمونه')">حذف</button>
            </div>
        </div>
    </div>

    <!-- بخش فیلم‌ها -->
    <div class="card form-container">
        <h2>فیلم‌ها</h2>
        <form id="checkForm">
            <button type="submit" class="btn btn-info btn-custom">مشاهده فیلم‌ها</button>
        </form>
        <% if (locals.error) { %>
            <div class="alert alert-danger mt-3"><%= error %></div>
        <% } %>
    </div>
</div>

<!-- مدال ویرایش پروفایل -->
<div class="modal fade" id="editProfileModal" tabindex="-1" aria-labelledby="editProfileModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="editProfileModalLabel" class="modal-title">ویرایش پروفایل</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="بستن"></button>
            </div>
            <div class="modal-body">
                <form id="editProfileForm">
                    <div class="mb-3">
                        <label for="editUsername" class="form-label">نام کاربری</label>
                        <input type="text" class="form-control" id="editUsername" value="">
                    </div>
                    <div class="mb-3">
                        <label for="editEmail" class="form-label">ایمیل</label>
                        <input type="email" class="form-control" id="editEmail" value="">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary btn-custom" onclick="saveProfileChanges()">ذخیره تغییرات</button>
                <button type="button" class="btn btn-secondary btn-custom" data-bs-dismiss="modal">انصراف</button>
            </div>
        </div>
    </div>
</div>

<!-- بارگذاری اسکریپت‌های Bootstrap -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
    // ایجاد نمونه مدال
    const editProfileModal = new bootstrap.Modal(document.getElementById('editProfileModal'));
    
    function openEditProfileModal() {
        // پیش‌فرض‌ها را در فرم مدال قرار می‌دهیم
        document.getElementById('editUsername').value = document.getElementById('displayUsername').textContent;
        document.getElementById('editEmail').value = document.getElementById('displayEmail').textContent;
        editProfileModal.show();
    }

    function saveProfileChanges() {
        const newUsername = document.getElementById('editUsername').value;
        const newEmail = document.getElementById('editEmail').value;
        document.getElementById('displayUsername').textContent = newUsername;
        document.getElementById('displayEmail').textContent = newEmail;
        const token = document.cookie.split('; ').find(row => row.startsWith('authToken=')).split('=')[1];

        fetch('/api/change', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ newEmail, newUsername })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('تغییرات با موفقیت ذخیره شد');
                editProfileModal.hide();
            } else {
                alert(data.message || 'ذخیره تغییرات با خطا مواجه شد');
            }
        })
        .catch(err => {
            console.error('خطا:', err);
            alert('خطایی رخ داده است');
        });
    }

    function addFriend() {
        const friendUsername = document.getElementById('newFriendUsername').value.trim();
        if (!friendUsername) {
            alert('نام کاربری دوست را وارد کنید!');
            return;
        }
        const token = document.cookie.split('; ').find(row => row.startsWith('authToken=')).split('=')[1];
        fetch('/api/add-friend', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ friendUsername })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('دوست با موفقیت اضافه شد');
                const friendItem = document.createElement('div');
                friendItem.className = 'friend-item';
                friendItem.innerHTML = '<span>' + friendUsername + '</span>' +
                '<button class="btn btn-danger btn-sm btn-custom" onclick="deleteFriend(\'' + friendUsername + '\')">حذف</button>';
                document.getElementById('friendsContainer').appendChild(friendItem);
                document.getElementById('newFriendUsername').value = '';

                const seeHistory = document.createElement('div');
                '<button class="btn btn-danger btn-sm btn-custom" onclick="deleteFriend(\'' + friendUsername + '\')">مشاهده نظرها و نقدها</button>';
                document.getElementById('friendsContainer').appendChild(seeHistory);
                document.getElementById('newFriendUsername').value = '';
            } else {
                alert(data.message);
            }
        })
        .catch(err => {
            console.error('خطا:', err);
            alert('خطایی رخ داده است');
        });

        }

    function deleteFriend(friendUsername) {
        const friendsContainer = document.getElementById('friendsContainer');
        const friendItems = friendsContainer.getElementsByClassName('friend-item');
        const token = document.cookie.split('; ').find(row => row.startsWith('authToken=')).split('=')[1];
        fetch('/api/delete-friend', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ friendUsername })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('دوست با موفقیت حذف شد');
            } else {
                alert(data.message);
            }
        })
        .catch(err => {
            console.error('خطا:', err);
            alert('خطایی رخ داده است');
        });
        for (let i = 0; i < friendItems.length; i++) {
            if (friendItems[i].textContent.includes(friendUsername)) {
                friendsContainer.removeChild(friendItems[i]);
                break;
            }
        }
    }

    document.getElementById('checkForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const token = document.cookie.split('; ').find(row => row.startsWith('authToken=')).split('=')[1];
        try {
            const response = await fetch('/movies', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
            });
            if (response.ok) {
                window.location.href = "/movies";
            } else {
                alert('مشکلی در ورود به بخش فیلم‌ها پیش آمد');
            }
        } catch (error) {
            console.error('خطا:', error);
            alert('خطایی در برقراری ارتباط رخ داده است');
        }
    });

    document.addEventListener('DOMContentLoaded', loadFriends);
    function loadFriends() {
        const token = document.cookie.split('; ').find(row => row.startsWith('authToken=')).split('=')[1];

        fetch('/api/friends', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const friendsContainer = document.getElementById('friendsContainer');
                friendsContainer.innerHTML = ''; // Clear old content

                data.allFriends.forEach(friend => {
                const friendItem = document.createElement('div');
                friendItem.className = 'friend-item';
                friendItem.innerHTML = `
                    <span>${friend.username}</span>
                    <button class="btn btn-danger btn-sm btn-custom" onclick="deleteFriend('${friend.username}')">حذف</button>
                `;
                friendsContainer.appendChild(friendItem);
            });
            } else {
                console.error('Failed to load friends:', data.message);
            }
        })
        .catch(err => console.error('Error fetching friends:', err));
    }

</script>
</body>
</html>



